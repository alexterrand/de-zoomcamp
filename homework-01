Q1:

1/ install docker
2/ run asked docker: `docker run -it --entrypoint bash python:3.12.8`
3/ check pip version: `pip -V`
ANSWER: pip 24.3.1

Q2:
Given the yaml file, we conclude that the hostame and port are:
  - Hostname: Within the Docker network created by Docker Compose, the db service is accessible using its service name db as a hostname.
  - Port: The PostgreSQL service inside the db container is running on port 5432.
ANSWER: db:5432

Q3:
Run SQL query, for example the first amount can be computed by:
SELECT COUNT(*) AS trips_up_to_1_mile
FROM ny_taxi
WHERE
    lpep_pickup_datetime >= '2019-10-01' AND
    lpep_dropoff_datetime < '2019-11-01' AND
    trip_distance <= 1;
repeat with similar syntax by ubdating clause on trip_distance to get other amount

ANSWER: 104,802; 198,924; 109,603; 27,678; 35,189

Q4:
Just order by the trip_distance and read the day corresponding to the longest trip
SELECT *
FROM ny_taxi
ORDER BY trip_distance DESC
LIMIT 1;
ANSWER: 2019-10-11

Q5:
Here we need to join our two table to have data on the name of the pickup location id

SELECT
    tz.Zone,
    SUM(nt.total_amount) AS total_amount
FROM
    ny-taxi AS nt
INNER JOIN
    taxi_zone AS tz
ON
    nt.PULocationID = tz.LocationID
WHERE
    nt.lpep_pickup_datetime >= '2019-10-18' AND
    nt.lpep_pickup_datetime < '2019-10-19'
GROUP BY
    tz.Zone
ORDER BY
    total_amount DESC;
HAVING 
    total_amount >= 13000

ANSWER:East Harlem North, East Harlem South, Morningside Heights

Q6:
We will answer by making two join on the zone tables and adding suffixes
SELECT
    nt.lpep_pickup_datetime,
    nt.tip_amount,
    tz_do.Zone AS Zone_do
FROM
    ny_taxi AS nt
INNER JOIN
    taxi_zone AS tz_pu
ON
    nt.PULocationID = tz_pu.LocationID
INNER JOIN
    taxi_zone AS tz_do
ON
    nt.DOLocationID = tz_do.LocationID
WHERE
    tz_pu.Zone = 'East Harlem North'
ORDER BY
    nt.tip_amount DESC;

ANSWER: JFK Airport

Q7:
terraform init: This command initializes your Terraform working directory, downloads provider plugins, and sets up the backend (where Terraform stores the state of your infrastructure).
terraform apply -auto-approve: This command applies the proposed plan after the plan is generated. This fulfills the requirement of "auto-executing the plan"
terraform destroy: This command destroys all the resources that are currently under the control of your Terraform configuration.

ANSWER:terraform init, terraform apply -auto-approve, terraform destroy




